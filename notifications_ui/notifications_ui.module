<?php
// $Id$
/**
 * @file
 * User Interface for subscriptions modules
 */

/**
 * Implementation of hook_help()
 */
function notifications_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/messaging/notifications/ui':
      $output = '<p>' . t('These are UI settings only and will define which options will be visible for end users and how they\'ll be displayed. Which options will be finally available will be determined by:'); 
      $output .= '<ol>';
      $output .= '<li>' . t('Enabled subscription types on the other Notifications settings pages') . '</li>';
      $output .= '<li>' . t('Permissions that you can configure on <a href="@administer-permissions">Administer permissions</a>.', array('@administer-permissions' => url('admin/user/permissions'))) . '</li>';
      $output .= '<li>' . t('The enabled options on this page.') .'</li>';
      $output .= '</ol></p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu()
 */
function notifications_ui_menu() {
  $items['admin/messaging/notifications/ui'] = array(
    'title' => 'User interface',
    'description' => 'Enables site settings for user subscriptions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notifications_ui_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'notifications_ui.pages.inc',
  );
  // Add single subscription page
  $items['user/%user/notifications/add'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Add subscription',
    'page callback' => 'notifications_ui_page_user_add',
    'page arguments' => array(1),
    'access callback' => 'notifications_ui_access_user_add',
    'access arguments' => array(1, 4),
    'file' => 'notifications_ui.pages.inc',
    'weight' => 100,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function notifications_ui_menu_alter(&$items) {
  foreach (notifications_subscription_types() as $type => $info) {
    if (!empty($info['user page'])) {
      $items[$info['user page']]['access callback'] = 'notifications_ui_access_page';
      $items[$info['user page']]['access arguments'] = array($type, 1);
    }
  }
}

/**
 * Menu access callback: add subscription
 */
function notifications_ui_access_user_add($account, $type = NULL) {
  // Main tab, visible only if any subscription type enabled
  $check_types = $type ? array($type) : array_keys(notifications_ui_subscription_types());
  foreach ($check_types as $type) {
    if (notifications_ui_subscription_type($type) && notifications_ui_user_options('create') && notifications_access_user_add($account, $type)) {
      return TRUE;
    }
  }
}

/**
 * Menu access callback: account pages
 */
function notifications_ui_access_page($type, $account) {
  // Global user permissions
  if (notifications_access_user($account) && notifications_ui_subscription_type($type) && notifications_ui_user_options('page')) {    
    // Check specifics for this subscription type
    $access = notifications_subscription_types($type, 'access');
    return $access ? user_access($access, $account) : TRUE;
  }
}

/**
 * Implementation of hook_notifications_event().
 * 
 * We need to handle some things when an event is triggered on form subsmission
 */
 function notifications_ui_notifications_event($op, $event = NULL, $account = NULL) {
  if ($op == 'trigger' && $event->type == 'node') { 
    if (($node = $event->get_object('node')) && isset($node->subscriptions)) {
      if ($event->action == 'insert') {
        // On insert some field information will be missing, we need to recreate it.
        // @todo Check this one, we may not need it anymore
        foreach ($node->subscriptions['params'] as $i => $subscriptions) {
          foreach ($subscriptions['fields'] as $key => $value) {
            if (!$value && isset($event->params[$key])) {
              $event->node->subscriptions['params'][$i]['fields'][$key] = $event->params[$key];
            }
          }
        }
      }
      $form_state['values']['subscriptions'] = $node->subscriptions;
      notifications_ui_options_form_submit('', $form_state);
    }
    elseif (($comment = $event->get_object('comment')) && isset($comment->subscriptions)) {
      $form_state['values']['subscriptions'] = $comment->subscriptions;
      notifications_ui_options_form_submit('', $form_state);      
    }
  }
}

/**
 * Get info about subscription types, exclude custom types
 *
 * @see notifications_subscription_types()
 */
function notifications_ui_subscription_types($type = NULL, $field = NULL) {
  static $types;
  
  if (!isset($types)) {
    $types = array();
    foreach (notifications_subscription_types() as $key => $info) {
      if (empty($info['custom'])) {
        $types[$key] = $info;
      }
    }
  }
  
  return notifications_array_info($types, $type, $field);
}

/**
 * Implementation of hook_forms()
 */
function notifications_ui_forms($form_id) {
  $forms = array();
  if (strpos($form_id, 'notifications_ui_options_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'notifications_ui_options_form',
    );
  }
  return $forms;

}

/**
 * Implementation of hook_form_alter()
 * 
 */
function notifications_ui_form_alter(&$form, $form_state, $form_id) {
  global $user;
  // Content type settings
  switch ($form_id) {
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        // Just in case we want to add more settings here
        $form['notifications']['notifications_node_ui'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Subscriptions UI'),
          '#default_value' => notifications_ui_node_options($form['#node_type']->type),
          '#options' => _notifications_ui_node_options(),
          '#description' => t('Enable different display options for subscriptions to this content type.'),
        );
        if (!variable_get('notifications_ui_per_type', 0)) {
          $form['notifications']['notifications_node_ui']['#disabled'] = TRUE;
          $form['notifications']['notifications_node_ui']['#description'] .= ' <strong>' . t('To enable these options check the <a href="@notifications-ui-settings">Notifications UI settings</a>', array('@notifications-ui-settings' => url('admin/messaging/notifications/ui'))) . '</strong>';
        }
      }
      break;

    case 'comment_form':
      // Add to comment forms.
      $node = node_load($form['nid']['#value']);
      if ($user->uid && notifications_ui_node_options($node->type, 'comment')) {
        $form[] = notifications_ui_node_subform($node);    
      }
      break;
    
    case 'notifications_user_overview':
      // Create new subscription
      $account = $form['account']['#value'];
      foreach (notifications_ui_subscription_types() as $key => $type) {
        if (notifications_ui_subscription_type($key) && notifications_ui_user_options('create') && notifications_access_user_add($account, $key)) {
          $create[] = l($type['title'], "user/$account->uid/notifications/add/$key");
        }
      }
      if (!empty($create)) {
        // $output .= theme('item_list', $create, t('or create a new subscription'));
        $form['create'] = array('#type' => 'item', '#weight' => 30, '#title' => t('or create a new subscription'), '#value' => theme('item_list', $create));
      }      
      break;
       
    default: 
      if (isset($form['type']['#value']) && $form['type']['#value'] .'_node_form' == $form_id && notifications_ui_node_options($form['type']['#value'], 'form')) {
        //  Add node forms.
        $node = $form['#node'];
        $form[] = notifications_ui_node_subform($node);
      }  
  }
}

/**
 * Form for object (node, user, term...) subscriptions
 *
 * @param $subscriptions
 *   Array of subscription options
 * @param $fieldset
 *   Optional produce fieldset instead of full form 
 * @param $buttons
 *   Whether to add buttons
 * 
 * @return 
 *   Full subscriptions form, or subscriptions fieldset
 */
function notifications_ui_options_form($form_state, $subscriptions, $fieldset = FALSE, $buttons = TRUE) {
  global $user;

  $form = array();  

  // Process all options building the array of indexed params for each
  $options = $params = $defaults = array();
  $index = 1; // If we start with zero, get some value sent as 0 => 0
  $number = 0; // Number of subscriptions
  foreach ($subscriptions as $subscription) {
    $options[$index] = $subscription->get_name();
    $params[$index] = $subscription;
    // Check wether user is subscribed
    if ($subscription->is_instance()) {
      $defaults[] = $index;
      $number++;
    }
    $index++;
  }

  // Now we have compiled the data, build the form. Note that we are passing the parameters
  // in the 'params' value as an array, while the checkboxes are in 'options' fieldset
  if ($fieldset) {
    $form['subscriptions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subscriptions (@number)', array('@number' => $number)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
  }
  else {
    $form['subscriptions'] = array('#tree' => TRUE);
  }
  $form['subscriptions']['params'] = array('#type' => 'value', '#value' => $params);
  $form['subscriptions']['options'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $defaults,
    '#options' => $options,
  );

  $form['subscriptions']['account'] = array('#type' => 'value', '#value' => $user);
  
  if ($buttons) {
    if ($fieldset) {
      $form['subscriptions']['submit'] = array('#type' => 'submit', '#value' => t('Update'));
    }
    else {
      $form['submit'] = array('#type' => 'submit', '#value' => t('Update'));
    }
    // If full form, redirect so the full page which may have subscription links is updated
    $form['#redirect'] = $_GET['q'];
    $form['#submit'] = array('notifications_ui_options_form_submit');
  }
  
  return $form;
}


/**
 * Form for node subscriptions
 * @ TODO: offer the same form in a block to be put in the contents region.
 *
 * @param $node
 *   a node object
 * @return 
 *   Partial subscription form, just missing submit button.
 */
function notifications_ui_node_subform($node) {
  global $user;
  
  // Retrieve node options if not passed
  $node_options = notifications_ui_subscribe_options($user, 'node', $node);
  
  $subform = notifications_ui_options_form(NULL, $node_options, TRUE, FALSE);
  
  return $subform;
}


/**
 * Form submission, node subscriptions form
 */
function notifications_ui_options_form_submit($form, &$form_state) {
  $enabled = $disabled = 0;
  foreach ($form_state['values']['subscriptions']['options'] as $index => $value) {
    $subscription = $form_state['values']['subscriptions']['params'][$index];   
    if ($value && empty($subscription->sid)) {
      // We checked a disabled subscription
      notifications_save_subscription($subscription);
      $enabled++;
    }
    elseif (!$value && !empty($subscription->sid)) {
      // we unchecked an enabled subscription
      notifications_subscription_delete($subscription->sid);
      $disabled++;
    }
  }

  if ($enabled) {
    drupal_set_message(format_plural($enabled, 'A subscription has been created', '@count subscriptions have been created'));
  }
  if ($disabled) {
    drupal_set_message(format_plural($disabled, 'A subscription has been deleted', '@count subscriptions have been deleted'));
  }
}

/**
 * Implementation of hook_link()
 * 
 * Add subscriptions links to nodes
 */
function notifications_ui_link($type, $node = NULL, $teaser = FALSE) {
  global $user;

  if ($type == 'node' && notifications_access_subscribe($user) && (
    notifications_ui_node_options($node->type, 'teaserlinks') && $teaser ||
    notifications_ui_node_options($node->type, 'links') && !$teaser
  )) {
    // Now we have the array of allowed options ready, build single links 
    return notifications_ui_subscribe_links('node', $node);
  }
}

/**
 * Build subscription options as an array of links
 * 
 * These links can be added as node link elements or rendered some other way
 * 
 * @param $subscription_types
 *   Array of subscription objects, either actual subscriptions or subscription templates
 * @param $prefix
 *   Prefix to use for the link indexes
 */
function notifications_ui_subscribe_links($type, $object) {
  global $user;
  notifications_include('object.inc');
  $subscribe = notifications_ui_link_options('subscribe');
  $unsubscribe = notifications_ui_link_options('unsubscribe');
  return notifications_object_subscribe_links($type, $object, $user, $subscribe, $unsubscribe);
}

/**
 * Get subscribe / unsubscribe links to display in page
 * 
 * This is a wrapper to get links for the page (not for mails nor anything else) and
 * will count in some specific UI options.
 * 
 * @see notifications_get_links()
 */
function notifications_ui_get_link($type, $options) {
  $options += notifications_ui_link_options($type);
  return notifications_get_link($type, $options);
}

/**
 * Get options for links
 * 
 * @param $type
 *   'subscribe' or 'unsubscribe'
 */
function notifications_ui_link_options($type) {
  $links = array('destination' => $_GET['q']);
  if ($type == 'subscribe' && variable_get('notifications_ui_subscribe_links', 0)) {
    $links += array('signed' => TRUE, 'confirm' => FALSE);
  }
  if ($type == 'unsubscribe' && variable_get('notifications_ui_unsubscribe_links', 0)) {
    $links += array('signed' => TRUE, 'confirm' => FALSE);
  }  
  return $links;
}

/**
 * Display a button + js overlay
 * 
 * From http://groups.drupal.org/node/17779
 */
function notifications_ui_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  
  static $form_instance_id = 0;

  if ($op == 'alter' && notifications_ui_node_options($node->type, 'subform')) {
    if (($options = notifications_ui_subscribe_options($user, 'node', $node)) ) {
      $node->body .= drupal_get_form('notifications_ui_options_form_'.$form_instance_id, $options, TRUE, TRUE);
      $form_instance_id++;
    }
  }
}



/**
 * Get list of allowed subscriptions types
 * 
 * Checks permissions and settings
 * 
 * @return
 *   Subscription types allowed for this user
 */
function notifications_ui_allowed_types() {
  $allowed = array();
  foreach (notifications_subscription_types() as $type => $info) {
    if (notifications_ui_subscription_type($type) && !empty($info['access']) && user_access($info['access'])) {
      $allowed[$type] = $info;
    }
  }
  return $allowed;
}

/**
 * Get list of possible and existing subscriptions for user/object
 * 
 * @param $account
 *   User account to get options/subscriptions for
 * @param $type
 *   Subscription type to get options: 'user', 'node'
 * @param $object
 *   The object to subscribe. It may be $node or $user
 * 
 * @return
 *   Array of subscription objects, that will be mixed subscription templates and actual subscriptions
 */
function notifications_ui_subscribe_options($account, $type, $object) {
  notifications_include('object.inc');
  return notifications_object_user_subscriptions($type, $object, $account);
}

/**
 * Implementation of hook_block()
 * 
 * This block is just for registered users. For anonymous see notifications_anonymous module.
 */
function notifications_ui_block($op = 'list', $delta = 0) {
  global $user;
  
  if ($op == 'list') {
    $blocks[0]['info'] = t('Subscriptions');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    return $blocks;
  }
  else if ($op == 'view' && $user->uid && notifications_access_subscribe($user)) {
    // Only return block if we have something for it
    if ($options = notifications_ui_block_options($user)) {
      $block['subject'] = t('Subscriptions');
      $block['content'] = drupal_get_form('notifications_ui_options_form', $options);   
      return $block;  
    }
  }  
}

/**
 * Compile block options for user
 */
function notifications_ui_block_options($user) {
  $args = arg();
  switch (arg(0)) {
    case 'node':
      if (is_numeric(arg(1)) && ($node = node_load(arg(1))) && notifications_ui_node_options($node->type, 'block')) {
        // Node subscriptions
        return notifications_ui_subscribe_options($user, 'node', $node);   
      }
      break;
    case 'user':
      if (is_numeric(arg(1)) && notifications_ui_account_options('block') && ($account = user_load(arg(1)))) {
        // User subscriptions
        return notifications_ui_subscribe_options($user, 'user', $account);    
      }
      break;
    case 'taxonomy':
      if (arg(1) == 'term' && is_numeric(arg(2)) && notifications_ui_subscription_type('taxonomy') && ($term = taxonomy_get_term(arg(2)))) {
        // Subscriptions to taxonomy term
        return notifications_ui_subscribe_options($user, 'term', $term);
      }
      break;
  }  
}
/**
 * Check whether this subscription type is enabled / disabled
 * 
 * @param $type
 *   Subscription type
 * 
 * @todo Maybe move settings into a table instead a variable
 */
function notifications_ui_subscription_type($type) {
  $settings = variable_get('notifications_ui_types', array());
  return in_array($type, $settings, TRUE);
}

/**
 * Implementation of hook node_type
 */
function notifications_ui_node_type($op, $info) {
  if ($op == 'delete') {
    // Remove settings for this node type
    variable_del('notifications_node_ui_'. $info->type);
  }
}

/**
 * Get settings value for content types
 * 
 * @param $type
 *   Content type to get settings for
 * @param $option
 *   Optional option to check (each option can be enabled or disabled)
 */
function notifications_ui_node_options($type = NULL, $option = NULL) {
  // We can use global options or per content type options. The default setting will be 'links' = 1
  $defaults = variable_get('notifications_ui_node', array('links'));
  if ($type && variable_get('notifications_ui_per_type', 0)) {
    $settings = variable_get('notifications_node_ui_'. $type, $defaults);  
  } else {
    $settings = $defaults;
  }
  if ($option) {
    return in_array($option, $settings, TRUE) ? TRUE : FALSE;
  }
  else {
    return $settings;
  }
}

/**
 * Check enabled option / Get options for user account pages
 * 
 * @param $type
 *   Option type = 'page', 'create'
 *   Null to get all of them
 */
function notifications_ui_user_options($type = NULL) {
  $settings = variable_get('notifications_ui_user', array('page', 'create'));
  if ($type) {
    return in_array($type, $settings, TRUE);
  }
  else {
    return $settings;
  }
}

/**
 * Get subscribe otpions for user account tabs
 * 
 * @param $type
 *   Content type
 * @param $option
 *   Optional option to check
 */
function notifications_ui_account_options($option = NULL) {
  // The default setting will be 'links' = 1
  $settings = variable_get('notifications_ui_account_options', array('links'));
  if ($option) {
    return in_array($option, $settings, TRUE);
  }
  else {
    return $settings;
  }
}

/**
 * Implementation of hook_user().
 */
function notifications_ui_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  if ($op == 'view' ) {
    // Add plain links if enabled
    if (notifications_ui_account_options('links') && notifications_access_subscribe($user) && ($links = notifications_ui_subscribe_links('user', $account))) {
      $account->content['summary']['notifications'] =  array(
        '#type' => 'user_profile_item',
        '#title' => t('Subscriptions'),
        '#value' => theme('links', $links, array('class' => 'item-list')),
      );
    }
  }
}

/**
 * Form for node subscriptions
 * @ TODO: offer the same form in a block to be put in the contents region.
 *
 * @param $node
 *   a node object
 * @return 
 *   Partial subscription form, just missing submit button.
 */
function notifications_ui_account_subform($author, $options) {
  global $user;
  
  // Retrieve node options if not passed
  $options = notifications_ui_user_account($user, $author);
  
  $subform = notifications_ui_options_form(NULL, $options, TRUE, TRUE);
  
  return $subform;
}
/**
 * Allowed options for content types
 */
function _notifications_ui_node_options() {
  return array(
    'form' => t('<strong>In node form</strong>. A subscriptions subform will be available when creating or editing nodes.'),
    'comment' => t('<strong>In comment form</strong>. A subscriptions subform will be available when posting comments.'),
    'links' => t('<strong>Full node links</strong>. Subscription links will be displayed for full node pages.'),
    'teaserlinks' => t('<strong>Teaser node links</strong>. Subscription links will be displayed for node teasers.'),
    'subform' => t('<strong>Form on node pages</strong>. A collapsible subscriptions form will be displayed for full node pages.'),    
    'block' => t('<strong>In block</strong>. Options will be displayed on the Subscriptions block when viewing a node.'),
  );
}

/**
 * Allowed options for user accounts
 */
function _notifications_ui_account_options() {
  return array(
    //'form' => t('Subform on user account tab'),
    'links' => t('Links on user account tab'),
    'block' => t('Display in block'),
  );
}

/**
 * Implementation of hook_theme()
 */
function notifications_ui_theme() {
  return array(
    'notifications_ui_subscription_types' => array(
      'arguments' => array('element' => NULL),
      'file' => 'notifications_ui.pages.inc',
    ),
    'notifications_ui_content_types' => array(
      'arguments' => array('element' => NULL),
      'file' => 'notifications_ui.pages.inc',
    ),
    'notifications_ui_add_list' => array(
      'arguments' => array('content' => NULL),
      'file' => 'notifications_ui.pages.inc',
    ),
  );
}
